# async-observer - Rails plugin for asynchronous job execution

# Copyright (C) 2007 Philotic Inc.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#######################################################################
# To run this script:
#
#   rails runner -e <environment> worker3 [-d] [--pid <path-to-pid-file>]
#
# Where:
#
#   -e <environment> - the Rails environment in which to run the worker (production, development, etc)
#   -d               - run the script as a daemon
#   --pid <path-to-pid-file> - the path to the file to contain the process id of the running
#                      daemon.
#
################################################################################

# Runs the worker class.
def run_worker
  require 'async_observer/worker'
  AsyncObserver::Worker.new(binding).run()
end

# Check for the 'daemonize' argument
if ARGV.include?('-d')

  pidpath = 'log/worker.pid'  # The default pid file path

  if ARGV.include?('--pid') # look up the pid path
    ARGV.each_with_index{|arg,i| pidpath = ARGV[i+1] if arg == '--pid' }
    STDERR.puts "Missing pid file path!" and exit(1) if pidpath.nil?
  end

  unless File.writable?(File.dirname(pidpath))
    STDERR.puts "#{pidpath} not writable!"
    exit(1)
  end

  if File.exist?(pidpath)
    STDERR.puts "#{pidpath} exits! Make sure the worker isn't still running and try again after rm #{pidpath}"
    exit(1)
  end

  require File.join(Rails.root, 'vendor/plugins/async_observer/lib/async_observer/daemonize')

  # Run the worker as a detached daemon
  AsyncObserver::Daemonize.detach(pidpath) do
    run_worker
  end

else
  run_worker
end
